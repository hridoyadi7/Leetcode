#include<iostream>
#include<unordered_set>
using namespace std;

struct Node{
    int data;
    Node *next;
    Node(int d)
    {
        data=d;
        next=NULL;
    }
};

void display(Node *head)
{
    Node *curr=head;
    while(curr)
    {
        cout<<curr->data<<" ";
        curr=curr->next;
    }
}

int deleteEnd (Node *head)
{
    Node *ptr=head,*preptr=NULL;
    while(ptr->next!=NULL)
    {
        preptr=ptr;
        ptr=ptr->next;
    }
    int var=ptr->data;
    preptr->next=NULL;
    delete ptr;
    return var;
}


Node *deleteEle(Node *head,int x)
{
    if(head==NULL)
        return NULL;
    else if(head->data==x)
    {
        return head;
    }
    else{
        Node *preptr=NULL,*ptr=head;
        while(ptr->data!=x)
        {
            preptr=ptr;
            ptr=ptr->next;
        }
        preptr->next=ptr->next;
        delete ptr;
        return head;
    }
}
Node *insertBegin(Node *head,int x)
{
    Node *temp=new Node(x);
    if(head==NULL)
        return temp;
    else{
        temp->next=head;
        head=temp;
        return head;
    }
}

void LRUcache(int arr[],int n,int size)
{
    Node *head=NULL;
    int count=0;
    unordered_set<int>s;
    for(int i=0;i<n;i++)
    {
        if(count<=size)
        {
            if(s.find(arr[i])==s.end())
            {
                head=insertBegin(head,arr[i]);
                s.insert(arr[i]);
            }
            else{
                head=deleteEle(head,arr[i]);
                head=insertBegin(head,arr[i]);
            }
            count++;
        }
        else
        {
            if(s.find(arr[i])==s.end())
            {
                int Taildata=deleteEnd(head);
                head=insertBegin(head,arr[i]);
                s.insert(arr[i]);
                s.erase(Taildata);
            }
            else
            {
                head=deleteEle(head,arr[i]);
                head=insertBegin(head,arr[i]);
            }
        }
        display(head);
        cout<<endl;
    }
}

int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    int size;
    cin>>size;
    LRUcache(arr,n,size);
    return 0;
}
