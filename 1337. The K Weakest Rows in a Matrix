    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        unordered_map<int,int>mp;
        for(int i=0;i<mat.size();i++)
        {
            mp[i]=0;
            for(int j=0;j<mat[i].size();j++)
            {
                if(mat[i][j]==1)
                    mp[i]++;
                else
                    break;
            }
            
        }
        vector<pair<int,int>>v;
        for(auto it=mp.begin();it!=mp.end();it++)
        {
            int a=it->first;
            int b=it->second;
            v.push_back(make_pair(b,a));
        }
        sort(v.begin(),v.end());
        vector<int>res(k);
        for(int i=0;i<k;i++)
            res[i]=v[i].second;
        return res;
    }
    ---------------------------------------------------------------------------------------------------
    
     vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        priority_queue<pair<int,int>>pq;
        for(int i=0;i<mat.size();i++)
        {
            int count=0;
            for(int j=0;j<mat[i].size();j++)
            {
                if(mat[i][j]==1)
                    count++;
            }
            pq.push(make_pair(count,i));
            if(pq.size()>k)
                pq.pop();
        }
        vector<int>v;
        while(pq.size()>0)
        {
            pair<int,int>p;
            p=pq.top();
            pq.pop();
            int num=p.second;
            v.push_back(num);
        }
        reverse(v.begin(),v.end());
        return v;
    }
